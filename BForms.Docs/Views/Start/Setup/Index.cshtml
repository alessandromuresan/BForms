@using BForms.Docs.Helpers
@{
    ViewBag.Title = "Setup via NuGet";
}

<div class="row">
    <div class="hidden-xs hidden-sm col-md-3 col-lg-3">
        <div class="bs-sidebar">
            <ul class="nav bs-sidenav">
                <li>
                    <a href="#setup">Setup</a>
                    <ul class="nav">
                        <li><a href="#install">Install</a></li>
                        <li><a href="#validate">Validation provider</a></li>
                        <li><a href="#css">Include CSS</a></li>
                        <li><a href="#js">Include JS</a></li>
                        <li><a href="#configure">RequireJS config</a></li>
                        <li><a href="#internationalization">Internationalization</a></li>
                        <li><a href="#example">BForms example</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <main class="col-md-9 col-lg-9" role="main">
        <div class="bs-docs-section">
            <div class="page-header">
                <h1 id="setup">Setup BForms for ASP.NET MVC via NuGet</h1>
            </div>
            <h3 id="install">1. NuGet</h3>
            <p>
                Install the <a href="http://www.nuget.org/packages/BForms.MVC/">BForms.MVC</a> package via NuGet Manager in your MVC project.
                This process will include the BForms JS Framework in your Scripts folder and will add references to the BForms and RequireJsNet assemblies.
                The JavaScript and CSS components come in two forms, as individual files and as <b>minified bundles</b>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Files.embed")
            </pre>
            <br />
            <h3 id="validate">2. Validation provider</h3>
            <p>
                BForms comes with its custom validation provider. In order to set it up, add the following line in the <code>Application_Start()</code> method (found in Global.asax):
            </p>
            <h4 class="sub_title">Register the BForms validation provider</h4>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Global.cs.embed")
            </pre>
            <br />
            <h3 id="css">3. Include CSS</h3>
            <p>
                The next step is to add the BForms CSS file to your bundles. Go to the RegisterBundles method in App_Start\BundleConfig.cs and add the following code:
            </p>

            <h4 class="sub_title">Register the CSS bundle</h4>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_BundleConfig.cs.embed")
            </pre>
            <br />
            <p>
                Ok! You have added a new bundle, but you also have to use it. Go to Layout.cshtml (or any other layout you are using) and modify the
                head tag like the one below:
            </p>
            <h4 class="sub_title">Include the CSS bundle in your layout</h4>
            <pre class="prettyprint lang-html bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_LayoutCss.cshtml.embed")
            </pre>
            <br />
            <h3 id="js">4. Include JS</h3>
            <p>
                The next step is to include the BForms javascript components in your project. There are two ways of working with BForms JS components:
                using <a href="http://www.nuget.org/packages/RequireJsNet/">RequireJS.NET</a> (recommended) or by referencing the javascript files
                directly from the <code>~/Scripts/Bforms/Bundles/js</code> folder.
            </p>
            <p>
                You can read more here: <a href="http://requirejs.org/docs/whyamd.html">AMD</a>,
                <a href="http://requirejs.org/docs/start.html">RequireJS</a>
                and <a href="http://www.stefanprodan.com/2013/08/setup-requirejs-for-asp-net-mvc-using-nuget/">RequireJS.NET</a>
            </p>
            <h4 class="sub_title">Using RequireJS</h4>
           
            <p>
                RequireJS comes in handy when you want a release version of your app. Inside the <code>~/Scripts/Bforms</code>
                folder there are 2 configuration files for javascript files: <code>RequireJS.json</code> and <code>RequireJS.Release.json</code>.
                To use them both include the following code in your layout:
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_LayoutRequire.cshtml.embed")
            </pre>
            <br />
            <h4 class="sub_title">Without RequireJS - Include JS with ASP.NET bundling</h4>
            <p>
                You need to include a bundle for javascript files too (as you did before with the css files). Copy the following code in your RegisterBundles:
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_BundleConfigJs.cs.embed")
            </pre>
            <br />
            <h3 id="configure">5. RequireJS configuration</h3>
            <p>
                First of all, you need to remember that this step is optional. You only need to do it if you want additional configuration options for your RequireJS installation.
            </p>
            <p>
                Let's say you want to add a script to your project. Create <code>RequireJS.json</code> and <code>RequireJS.Release.json</code> as in the image bellow:
            </p>
            <h4 class="sub_title">Configuration files</h4>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/require-config-files.PNG")" />
            </div>
            <p>
                Note that selected files from the above image are new. The BForms package comes with its own configuration, which you can find under <code>Scripts/BForms</code>.
            </p>
            <p>
                Now that we have our files, let's add references to our scripts. To show you how to do this we have created a script
                called <code>main-script.js</code> under  <code>Scripts/Controllers/Common</code>, which contains only a <code>console.log</code> statement.
            </p>
            <h4 class="sub_title">Main-script file</h4>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/main-script-file.PNG")" />
            </div>
            <br />
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_MainScriptDefinition.cs.embed")
            </pre>
            <br />
            <p>
                Add the path in your newly created configuration files. For example, <code>RequierJS.json</code> should look like this:
            </p>
            <h4 class="sub_title">Configuration files content</h4>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_ScriptReference.cs.embed")
            </pre>
            <br />
            <p>
                As you can see in the code above we have added the path to our scripts (just one in our case) without the <code>.js</code> extension.
                We don't need to prefix our path with <code>Scripts/</code> because RequireJS will automatically search there.
                <br />
            </p>
            <p>
                Don't forget to update your <code>_Layout.cshtml </code>
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_LayoutRequireUpdated.cshtml.embed")
            </pre>

            <h3 id="internationalization">Internationalization</h3>
            <p>
                In order to setup the resources, you first need to add the following line in the <code>Application_Start()</code> method (Global.asax):
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Internalization.cs.embed")
            </pre>
            <br />

            <h3>Keys</h3>
            <p>
                After setting that up, you should now define the keys in your resource files.
            </p>
            <h4 class="sub_title">Grid</h4>
            <div class="bs-example bs-img-example">
                <img src="~/Content/images/docs/grid-pager.png">
            </div>
            <br />
            <p>
                <code>BF_GroupEditorMoveToGroups</code> Default Value : "Move to groups"<br />
                <code>BF_Items</code> Default value: "items" <br />
                <code>BF_New</code> Default value : "New"<br />
                <code>BF_NoResults</code> Default value: "There are no results" <br />
                <code>BF_Of</code> Default value: "of" <br />
                <code>BF_Reset</code> Default value : "Reset"<br />
                <code>BF_ResultsPerPage</code> Default value: "results per page" <br />
                <code>BF_Save</code> Default value : "Save"<br />
                <code>BF_Search</code> Default value : "Search"<br />
                <code>BF_Select</code> Default value : "Select"<br />
            </p>

            <h3 id="example">Example</h3>
            <p>
                Thumbs up! Now that everything is set up you can start working on your new project. Let's say you want to add a dropdown element
                somewhere in your application. Read the following steps and you'll see how easy it is.
            </p>
            <h4 class="sub_title">Model definition - step 1</h4>
            <p>
                You need to create your model. Let's name it <b>Demo</b>.
                <br />As we said earlier, we need to add a dropdown property.
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_ModelDefinition.cs.embed")
            </pre>
            <br />
            <p>
                If you haven't read the BForms documentation yet, the <code>BsControl</code> annotation helps you define what kind of control you want to render for that property.
                You can find a list of values for the <code>BsControlType</code> enum <a href="@Url.Action("Overview", "Docs")#html-helpers">here</a>.
            </p>
            <p>
                The Display annotation comes with ASP.NET and, in our case, we used the properties Name (the output of the Html.BsLabelFor helper) and Prompt (a placeholder value shown in your dropdown before you select anything).
            </p>
            <p>
                Another important aspect is the type argument of the generic class <code>BsSelectList&lt;&gt;</code>.
                Upon form submission, the type of the <code>SelectedValues</code> property for your <code>DemoDropdown</code> will be <code>int?</code> since <code>DemoDropdown</code>
                was declared as <code>BsSelectList&lt;int?&gt;</code>.
                Had we defined it as <code>BsSelectList&lt;string&gt;</code>, <code>DemoDropdown.SelectedValues</code> would be of type string.
            </p>
            <h4 class="sub_title">Data binding - step 2</h4>
            <p>
                We have a dropdown but we need to fill it with some data. You can do this from a database, but we will show you how it can be done from an enum.
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_EnumDefinition.cs.embed")
            </pre>
            <br />
            <p>
                We recommend that you use our helper:
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_EnumHelper.cs.embed")
            </pre>
            <br />
            <p>
                There's also another way if you want to write more code:
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_FillDropdown.cs.embed")
            </pre>
            <br />
            <h4 class="sub_title">Controller - step 3</h4>
            <p>
                We showed you earlier how to bind data and now you will see where to use it.
            </p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Controller.cs.embed")
            </pre>
            <h4 class="sub_title">View - step 4</h4>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_View.cshtml.embed")
            </pre>
            <br />
            <p>
                Writing the view is very simple. We have a form which has a class named <code>js-demoForm</code> (remember this because it is important)
                and an Html helper <code>@@Html.BsSelectFor</code> (similar to @@Html.DropDownListFor) that renders a dropdown.
            </p>
            <p>
                Don't forget to add <code>@@model Demo</code> to your view.
            </p>

            <h4 class="sub_title">Javascript - step 5</h4>
            <p>
                First of all you need to create a folder named <code>Controllers</code> under <code>Scripts</code>.
                After that, if you're not working in an area, create a folder called <code>Root</code> under Controllers (that you have created few seconds ago).
                Otherwise, replace Root with the area name.
            </p>
            <p>
                Create a new folder that has the same name as your controller inside the folder you've just created.<br />
                Finally you just have to add a javascript file which has to be named like this:.
            </p>
            <p>
                controller_name-action_name.js (eg: home-index.js)
            </p>

            <p>
                In the end you should have something like this:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Scripts.embed")
            </pre>
            <br />
            <p>Javascript code from <code>home-index.js</code>:</p>
            <pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Start/Setup/Source/_Javascript.cs.embed")
            </pre>
            <br />
            <p>
                The important part is in <code>HomeIndex.prototype.init</code> function. As you can see, we have selected our form
                (<code>.js-demoForm</code>, remember ?) and we have applied bforms on it. That's all you have to do.
            </p>
            <p>
                This is how your home page should look like:
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/project-setup-dropdown.PNG")" />
            </div>
            <br />
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/project-setup-dropdown-open.PNG")" />
            </div>
        </div>

    </main>
</div>
